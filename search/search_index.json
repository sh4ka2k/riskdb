{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Risk Database","title":"Risk Database"},{"location":"#risk-database","text":"","title":"Risk Database"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/","text":"Log4Shell Summary Log4j is a Java-based logging utility widely used as a dependency in a lot of popular frameworks, including but not limited to Apache Hadoop, Struts2, and others. The Log4Shell RCE vulnerability allows remote attackers to execute remote code on the affected versions of Apache Log4j in order to gain access to systems. All versions from 2.0-alpha7 to 2.17.0, excluding 2.3.2 and 2.12.4 are affected by this vulnerability. Solution Disabling the feature with log4j2.formatMsgNoLooups is not enough! Some older posts on the internet state that it is enough to start the Java VM with a command line that disables the affected feature. This does not protect you against CVE-2021-45046 . Uprade to version 2.16.0 or later. (recommended) Remove the class JndiLookup from the Java Classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class Further Reading https://logging.apache.org/log4j/2.x/security.html https://access.redhat.com/security/vulnerabilities/RHSB-2021-009 https://www.lunasec.io/docs/blog/log4j-zero-day/ https://securitytrails.com/blog/apache-log4j-vulnerability","title":"Log4Shell"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/#log4shell","text":"","title":"Log4Shell"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/#summary","text":"Log4j is a Java-based logging utility widely used as a dependency in a lot of popular frameworks, including but not limited to Apache Hadoop, Struts2, and others. The Log4Shell RCE vulnerability allows remote attackers to execute remote code on the affected versions of Apache Log4j in order to gain access to systems. All versions from 2.0-alpha7 to 2.17.0, excluding 2.3.2 and 2.12.4 are affected by this vulnerability.","title":"Summary"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/#solution","text":"Disabling the feature with log4j2.formatMsgNoLooups is not enough! Some older posts on the internet state that it is enough to start the Java VM with a command line that disables the affected feature. This does not protect you against CVE-2021-45046 . Uprade to version 2.16.0 or later. (recommended) Remove the class JndiLookup from the Java Classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class","title":"Solution"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/#further-reading","text":"https://logging.apache.org/log4j/2.x/security.html https://access.redhat.com/security/vulnerabilities/RHSB-2021-009 https://www.lunasec.io/docs/blog/log4j-zero-day/ https://securitytrails.com/blog/apache-log4j-vulnerability","title":"Further Reading"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/","text":"LFI - Local File Include Summary File inclusions are crucial for any server-side scripting languages and are responsible for content of files to be used as of an app\u2019s code. Local File Inclusion (LFI) occurs when malicious actors trick a web app into either running or exposing files on a web server, potentially causing sensitive information such as passwords or API keys to leak. Without properly implemented filtering, an attacker can request a specific path of a file and get access to sensitive information An attacker can attempt to inject malicious input to server log files and gain remote code execution Exploiting the LFI vulnerability can lead to code execution on the client-side and lead to further attacks, such as cross-site scripting (XSS) Detection Detecting LFI is most easily done with an automated vulnerability scanner as it\u2019s a widespread vulnerability Code scans can be performed in order to detect LFI weaknesses before hitting production servers Solution Implement proper filtering making sure no other than the intended files can be accessed. Further Reading https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21804 https://www.acunetix.com/blog/articles/local-file-inclusion-lfi/ https://owasp.org/www-project-web-security-testing-guide/v41/4Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion","title":"LFI - Local File Include"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#lfi-local-file-include","text":"","title":"LFI - Local File Include"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#summary","text":"File inclusions are crucial for any server-side scripting languages and are responsible for content of files to be used as of an app\u2019s code. Local File Inclusion (LFI) occurs when malicious actors trick a web app into either running or exposing files on a web server, potentially causing sensitive information such as passwords or API keys to leak. Without properly implemented filtering, an attacker can request a specific path of a file and get access to sensitive information An attacker can attempt to inject malicious input to server log files and gain remote code execution Exploiting the LFI vulnerability can lead to code execution on the client-side and lead to further attacks, such as cross-site scripting (XSS)","title":"Summary"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#detection","text":"Detecting LFI is most easily done with an automated vulnerability scanner as it\u2019s a widespread vulnerability Code scans can be performed in order to detect LFI weaknesses before hitting production servers","title":"Detection"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#solution","text":"Implement proper filtering making sure no other than the intended files can be accessed.","title":"Solution"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#further-reading","text":"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21804 https://www.acunetix.com/blog/articles/local-file-inclusion-lfi/ https://owasp.org/www-project-web-security-testing-guide/v41/4Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion","title":"Further Reading"},{"location":"WebApp/phpinfo-disclosure/","text":"phpinfo disclosure Summary The phpinfo(); function will emit the full php configuration of the server including all version numbers of all installed modules. Some applications include a phpinfo.php by default. The phpinfo(); function leaks the php version and version of all installed modules The phpinfo(); function can leak credentials and other sensitive information, including server environment variables Knowing the file system structure might give an attacker an advantage, especially if your site is vulnerable to directory traversal attacks Solution In most cases, the best solution is to remove the affected file. Further Reading https://www.php.net/manual/en/function.phpinfo.php https://stackoverflow.com/questions/3196011/what-security-problems-could-come-from-exposing-phpinfo-to-end-users","title":"phpinfo disclosure"},{"location":"WebApp/phpinfo-disclosure/#phpinfo-disclosure","text":"","title":"phpinfo disclosure"},{"location":"WebApp/phpinfo-disclosure/#summary","text":"The phpinfo(); function will emit the full php configuration of the server including all version numbers of all installed modules. Some applications include a phpinfo.php by default. The phpinfo(); function leaks the php version and version of all installed modules The phpinfo(); function can leak credentials and other sensitive information, including server environment variables Knowing the file system structure might give an attacker an advantage, especially if your site is vulnerable to directory traversal attacks","title":"Summary"},{"location":"WebApp/phpinfo-disclosure/#solution","text":"In most cases, the best solution is to remove the affected file.","title":"Solution"},{"location":"WebApp/phpinfo-disclosure/#further-reading","text":"https://www.php.net/manual/en/function.phpinfo.php https://stackoverflow.com/questions/3196011/what-security-problems-could-come-from-exposing-phpinfo-to-end-users","title":"Further Reading"},{"location":"WebApp/web%20debug%20enabled/","text":"Web Debug Enabled Summary Enabling a debug feature in both apps and web servers is a common practice when developing applications, as it helps to locate and fix errors quickly. The danger of this practice resides when web debug remains enabled in production servers: this allows remote attackers to identify sensitive information from the app or the system where they are hosted, such as notices, warnings, and critical errors, that can be later used to launch targeted attacks against certain CVEs. Exposing debug messages is considered bad practice, as it discloses a lot of information about the environment that would otherwise not be accessible Worst case, debug information can contain sensitive information such as environment variables containing API keys Solution Disable the debug feature on the application or the web server. Further Reading https://www.php.net/manual/en/function.error-reporting.php https://docs.microsoft.com/en-us/troubleshoot/developer/webapps/aspnet/development/disable-debugging-application https://wordpress.org/support/article/debugging-in-wordpress/","title":"Web Debug Enabled"},{"location":"WebApp/web%20debug%20enabled/#web-debug-enabled","text":"","title":"Web Debug Enabled"},{"location":"WebApp/web%20debug%20enabled/#summary","text":"Enabling a debug feature in both apps and web servers is a common practice when developing applications, as it helps to locate and fix errors quickly. The danger of this practice resides when web debug remains enabled in production servers: this allows remote attackers to identify sensitive information from the app or the system where they are hosted, such as notices, warnings, and critical errors, that can be later used to launch targeted attacks against certain CVEs. Exposing debug messages is considered bad practice, as it discloses a lot of information about the environment that would otherwise not be accessible Worst case, debug information can contain sensitive information such as environment variables containing API keys","title":"Summary"},{"location":"WebApp/web%20debug%20enabled/#solution","text":"Disable the debug feature on the application or the web server.","title":"Solution"},{"location":"WebApp/web%20debug%20enabled/#further-reading","text":"https://www.php.net/manual/en/function.error-reporting.php https://docs.microsoft.com/en-us/troubleshoot/developer/webapps/aspnet/development/disable-debugging-application https://wordpress.org/support/article/debugging-in-wordpress/","title":"Further Reading"}]}